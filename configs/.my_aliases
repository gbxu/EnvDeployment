THIS_PATH=$(readlink -f "$0")
THIS_DIR=$(dirname "$THIS_PATH")

if [[ "$(whoami)" != "root" ]]; then
    SUDO=sudo
fi

function dockerrun() {
    # example: INSTANCE=test dockerrun -v $HOME:/workspace --rm nvcr.io/nvidia/pytorch:23.08-py3
    # mapping hostport:containerport like: "-p 30022:22" will fail in host network mode
    if [ -z "$INSTANCE" ]; then
        INSTANCE="${USER}_instance"
        echo "INSTANCE is not set, using ${INSTANCE}"
    else
        echo "INSTANCE is set to ${INSTANCE}"
    fi
    if [ -z "$IMAGE" ]; then
        front_params=("${@:1:$(( $# - 1))}")
        echo "IMAGE is not set, using ${@: -1}."
        IMAGE="${@: -1}"
    else
        echo "IMAGE is set to $IMAGE."
        front_params=("$@")
    fi

    IFS=$'\n'
    device_list=($(ls /dev/infiniband/))
    unset IFS
    device_params=""
    for device in "${device_list[@]}"; do
        device_path="/dev/infiniband/$device"
        device_params+="--device $device_path "
    done

    if [ -d "/tmp/.X11-unix" ] && [ -f "${HOME}/.Xauthority" ]; then
        X11Files="-v /tmp/.X11-unix:/tmp/.X11-unix  -v ${HOME}/.Xauthority:/root/.Xauthority "
    else
        X11Files=""
    fi

    if [ -z "${MY_ENV_DEPLOYMENT}" ]; then
        echo "MY_ENV_DEPLOYMENT is not set."
        DeploymentFiles=""
    else
        DeploymentFiles="-v ${MY_ENV_DEPLOYMENT}/:/EnvDeployment"
    fi

    if [ ! -z "$DISPLAY" ]; then
        DockerDisplay="${DISPLAY/localhost/}"
    else
        DockerDisplay=""
    fi
    docker_run_command="docker run \
        --privileged \
        --cap-add=SYS_ADMIN \
        --cap-add=IPC_LOCK \
        --cap-add=sys_ptrace \
        --ipc=host --net=host $device_params \
        --shm-size=16g \
        --ulimit memlock=-1 \
        --ulimit stack=67108864 \
        -it \
        -e DISPLAY=${DockerDisplay} ${X11Files} ${DeploymentFiles} \
        --runtime=nvidia \
        -e NVIDIA_VISIBLE_DEVICES=all \
        --name=${INSTANCE} \
        -d \
        -h `hostname`-job \
        ${front_params[@]} ${IMAGE} /bin/bash -c '/usr/sbin/sshd -p 12445 -D; sleep infinity'"


    echo "Running command: $docker_run_command"
    if [ "$(docker ps -aq -f name=${INSTANCE})" ]; then
        if [ "$(docker ps -q -f name=${INSTANCE})" ]; then
            echo "Container ${INSTANCE} is already running."
        else
            echo "Starting container ${INSTANCE}."
            docker start ${INSTANCE}
        fi
    else
        eval $docker_run_command
    fi


    echo "Check your sshd by: "
    echo "  docker exec -it ${INSTANCE} /bin/bash -c 'ssh -o StrictHostKeyChecking=no -p 12445 localhost ls /'"
    echo "If it is not working, enter the instance, then:"
    echo "  Install: apt update; apt install ssh -y"
    echo "  Restart: service ssh start; service ssh stop; /usr/sbin/sshd -p 12445"
    echo '  Use your old public/private key or generate a new pair: ssh-keygen -t rsa -b 4096 -f /root/.ssh/id_rsa -N ""; cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys'
    echo "  Register your public key to ~/.ssh/authorized_keys"
    echo "  Check port in ~/.ssh/config and /etc/ssh/sshd_config"
    echo -e "\n"
    unset INSTANCE
    unset IMAGE
}

function dockerin() {
    if [ -n "$INSTANCE" ]; then
        echo "INSTANCE is set to ${INSTANCE}"
    elif [ -n "$1" ]; then
        INSTANCE="$1"
        echo "INSTANCE is set to ${INSTANCE}"
    else
        INSTANCE="${USER}_instance"
        echo "INSTANCE is not set, using ${INSTANCE}"
    fi
    docker exec -it ${INSTANCE} /bin/bash
    unset INSTANCE
}

function dockerssh() {
    if [ -n "$INSTANCE" ]; then
        echo "INSTANCE is set to ${INSTANCE}"
    elif [ -n "$1" ]; then
        INSTANCE="$1"
        echo "INSTANCE is set to ${INSTANCE}"
    else
        INSTANCE="${USER}_instance"
        echo "INSTANCE is not set, using ${INSTANCE}"
    fi
    docker exec -it ${INSTANCE} /bin/bash -c "/EnvDeployment/ubuntu/3_install_sshd_run.sh"
    unset INSTANCE
}

function code_even_tmux() {
    if [[ "$OSTYPE" =~ ^darwin ]]; then
        echo "in macOS"
        local cursor="/Applications/Cursor.app/Contents/Resources/app/bin/cursor"
        local code="/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code"
        if [ -n "$cursor" ]; then
            echo $cursor
        fi
        if [ -n "$code" ]; then
            echo $code
        fi
    else
        echo "in remote server"
        local cursor=${HOME}/.cursor-server/cli/servers/$(ls -t1 ${HOME}/.cursor-server/cli/servers/ | head -n 1)/server/bin/remote-cli/cursor
        local code=${HOME}/.vscode-server/cli/servers/$(ls -t1 ${HOME}/.vscode-server/cli/servers/ | head -n 1)/server/bin/remote-cli/code
        if [ -n "$cursor" ]; then
            echo $cursor
        fi
        if [ -n "$code" ]; then
            echo $code
        fi
    fi

    if [ -n "$TMUX" ]; then
        echo "in tmux"
        local vscode_tmux_ipc=$(set | grep VSCODE_IPC_HOOK_CLI= | cut -d'=' -f2)
        if [ -z "$vscode_tmux_ipc" ]; then
            echo "VSCODE_IPC_HOOK_CLI is not set. You may be in a VS Code terminal."
            
            if [[ "$OSTYPE" == "darwin"* ]]; then
                vscode_tmux_ipc=$(ls -t1 /tmp/vscode-ipc-*.sock | head -n 1)
                echo "Get VSCODE_IPC_HOOK_CLI=${vscode_tmux_ipc} from /tmp"
            else
                vscode_tmux_ipc=$(ls -t1 /run/user/$UID/vscode-ipc-*.sock | head -n 1)
                echo "Get VSCODE_IPC_HOOK_CLI=${vscode_tmux_ipc} from /run/user/${UID}"
            fi
            
            echo "Applying to all sessions..."
            export VSCODE_IPC_HOOK_CLI=$vscode_tmux_ipc
            local cmd="export VSCODE_IPC_HOOK_CLI=$vscode_tmux_ipc"
            for SESSION_NAME in $(tmux list-sessions -F '#{session_name}'); do
                execute_command_in_session "$SESSION_NAME" "$cmd"
            done        
        fi
    fi

    if [ "$1" = "prefer_code" ] && [ -n "$code" ]; then
        $code $2
    elif [ "$1" = "prefer_cursor" ] || [ -n "$cursor" ]; then
        $cursor $2
    else
        if [ -n "$cursor" ]; then
            $cursor $2
        elif [ -n "$code" ]; then
            $code $2
        else
            echo "No cursor or code found."
        fi
    fi
}

function execute_command_in_session() {
    local SESSION_NAME=$1
    local cmd=$2
    # 迭代所有属于该 session 的 window
    tmux list-windows -t $SESSION_NAME -F '#{window_id}' | while read WINDOW_ID; do
        # 迭代每个 window 中的所有 pane
        tmux list-panes -t $WINDOW_ID -F '#{pane_id}' | while read PANE_ID; do
            # 在每个 pane 中执行命令
            # echo "Executing command in session $SESSION_NAME, window $WINDOW_ID, pane $PANE_ID"
            tmux send-keys -t $PANE_ID "$cmd" C-m
        done
    done
}

function ensure_command_installed() {
  local command_name=$1
  local package_name=${2:-$1}

  if ! command -v "$command_name" >/dev/null 2>&1; then
    echo "$command_name not found, installing..."
    if command -v apt >/dev/null 2>&1; then
      ${SUDO} apt update && ${SUDO} apt install -y "$package_name"
    elif command -v yum >/dev/null 2>&1; then
      ${SUDO} yum install -y "$package_name"
    else
      echo "Error: Package manager not found. Cannot install $command_name."
      exit 1
    fi
  fi
}

function projectgit() {
    if [ ! -f "${MY_ENV_DEPLOYMENT}/privatedata/.ssh/id_rsa" ]; then
        echo "no ${MY_ENV_DEPLOYMENT}/privatedata/.ssh/id_rsa."
    else
        GIT_SSH_COMMAND="ssh -i ${MY_ENV_DEPLOYMENT}/privatedata/.ssh/id_rsa" git $@
    fi
}

alias code='code_even_tmux prefer_code'
alias cursor='code_even_tmux prefer_cursor'
echo "${THIS_PATH} reloaded."
