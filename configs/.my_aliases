if [[ "$(whoami)" != "root" ]]; then
    SUDO=sudo
fi

function dockerrun() {
    # example: dockerrun -v $HOME:/workspace nvcr.io/nvidia/pytorch:23.08-py3

    # 获取前面的参数
    front_params=("${@:1:$(( $# - 1))}")
    # 获取最后一个参数
    last_param="${@: -1}"

    IFS=$'\n'
    device_list=($(ls /dev/infiniband/))
    unset IFS
    device_params=""
    for device in "${device_list[@]}"; do
        device_path="/dev/infiniband/$device"
        device_params+="--device $device_path "
    done

    if [ -d "/tmp/.X11-unix" ] && [ -f "${HOME}/.Xauthority" ]; then
        X11Files="-v /tmp/.X11-unix:/tmp/.X11-unix  -v ${HOME}/.Xauthority:/root/.Xauthority "
    else
        X11Files=""
    fi

    if [ -z "${MY_ENV_DEPLOYMENT}" ]; then
        DeploymentFiles=""
    else
        DeploymentFiles="-v ${MY_ENV_DEPLOYMENT}/:/EnvDeployment"
    fi

    if [ ! -z "$DISPLAY" ]; then
        DockerDisplay="${DISPLAY/localhost/}"
    else
        DockerDisplay=""
    fi
    docker_run_command="docker run \
        --privileged \
        --cap-add=SYS_ADMIN \
        --cap-add=IPC_LOCK \
        --cap-add=sys_ptrace \
        --ipc=host --net=host $device_params \
        --shm-size=16g \
        --ulimit memlock=-1 \
        --ulimit stack=67108864 \
        -it \
        -e DISPLAY=${DockerDisplay} ${X11Files} ${DeploymentFiles} \
        --runtime=nvidia \
        -e NVIDIA_VISIBLE_DEVICES=all \
        --rm --name=${USER}_instance \
        ${front_params[@]} ${last_param} /bin/bash"

    echo "Running command: $docker_run_command"
    eval $docker_run_command
}

function dockerin() {
    docker exec -it ${USER}_instance /bin/bash
}

function dockerssh() {
    docker exec -it ${USER}_instance /bin/bash -c "/EnvDeployment/ubuntu/3_install_sshd_run.sh"
}

function vscode_in_tmux() {
    local vscode_ipc=$(set | grep VSCODE_IPC_HOOK_CLI= | cut -d'=' -f2)
    local mycode=code
    if [ -z "$t" ]; then
        echo "VSCODE_IPC_HOOK_CLI is not set. You may in a VS Code terminal."
        vscode_ipc=`ls -t1 /run/user/$UID/vscode-ipc-*.sock | head -n 1`
        echo "Get VSCODE_IPC_HOOK_CLI=${vscode_ipc} from /run/user/${UID}"
        echo "Applying to all sessions..."
        export VSCODE_IPC_HOOK_CLI=$vscode_ipc
        local cmd="export VSCODE_IPC_HOOK_CLI=$vscode_ipc"
        for SESSION_NAME in $(tmux list-sessions -F '#{session_name}'); do
            execute_command_in_session "$SESSION_NAME" "$cmd"
        done
        mycode=${HOME}/.vscode-server/bin/$(ls -t1 ${HOME}/.vscode-server/bin/ | head -n 1)/bin/remote-cli/code
    fi
    $mycode $1
}

function execute_command_in_session() {
    local SESSION_NAME=$1
    local cmd=$2
    # 迭代所有属于该 session 的 window
    tmux list-windows -t $SESSION_NAME -F '#{window_id}' | while read WINDOW_ID; do
        # 迭代每个 window 中的所有 pane
        tmux list-panes -t $WINDOW_ID -F '#{pane_id}' | while read PANE_ID; do
            # 在每个 pane 中执行命令
            # echo "Executing command in session $SESSION_NAME, window $WINDOW_ID, pane $PANE_ID"
            tmux send-keys -t $PANE_ID "$cmd" C-m
        done
    done
}

function ensure_command_installed() {
  local command_name=$1
  local package_name=${2:-$1}

  if ! command -v "$command_name" >/dev/null 2>&1; then
    echo "$command_name not found, installing..."
    if command -v apt >/dev/null 2>&1; then
      ${SUDO} apt update && ${SUDO} apt install -y "$package_name"
    elif command -v yum >/dev/null 2>&1; then
      ${SUDO} yum install -y "$package_name"
    else
      echo "Error: Package manager not found. Cannot install $command_name."
      exit 1
    fi
  fi
}

function projectgit() {
    if [ ! -f "${MY_ENV_DEPLOYMENT}/privatedata/.ssh/id_rsa" ]; then
        echo "no ${MY_ENV_DEPLOYMENT}/privatedata/.ssh/id_rsa."
    else
        GIT_SSH_COMMAND="ssh -i ${MY_ENV_DEPLOYMENT}/privatedata/.ssh/id_rsa" git $@
    fi
}

alias open='vscode_in_tmux'
echo ".my_aliases reloaded."
